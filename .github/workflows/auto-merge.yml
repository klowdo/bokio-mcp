name: Auto-merge

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    name: Auto-merge PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' || contains(github.head_ref, 'automated/')
    
    steps:
    - name: Get PR information
      id: pr_info
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          return {
            author: pr.user.login,
            title: pr.title,
            labels: pr.labels.map(l => l.name),
            draft: pr.draft,
            mergeable: pr.mergeable,
            base: pr.base.ref,
            head: pr.head.ref
          };

    - name: Check if PR is eligible for auto-merge
      id: eligible
      run: |
        PR_INFO='${{ steps.pr_info.outputs.result }}'
        AUTHOR=$(echo "$PR_INFO" | jq -r '.author')
        TITLE=$(echo "$PR_INFO" | jq -r '.title')
        LABELS=$(echo "$PR_INFO" | jq -r '.labels[]' | tr '\n' ' ')
        DRAFT=$(echo "$PR_INFO" | jq -r '.draft')
        MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
        HEAD_REF=$(echo "$PR_INFO" | jq -r '.head')
        BASE_REF=$(echo "$PR_INFO" | jq -r '.base')
        
        echo "Author: $AUTHOR"
        echo "Title: $TITLE"
        echo "Labels: $LABELS"
        echo "Draft: $DRAFT"
        echo "Mergeable: $MERGEABLE"
        echo "Head ref: $HEAD_REF"
        echo "Base ref: $BASE_REF"
        
        # Check if PR is eligible for auto-merge
        ELIGIBLE=false
        
        # Dependabot PRs
        if [[ "$AUTHOR" == "dependabot[bot]" ]]; then
          # Check if it's a minor/patch update
          if [[ "$TITLE" =~ ^chore\(deps\): |^chore\(deps-dev\): |^chore\(ci\): |^chore\(docker\): ]]; then
            # Exclude major version updates
            if [[ ! "$TITLE" =~ "major" ]] && [[ ! "$TITLE" =~ "breaking" ]]; then
              ELIGIBLE=true
              echo "✅ Dependabot PR eligible for auto-merge (minor/patch update)"
            else
              echo "❌ Dependabot PR not eligible (major version update)"
            fi
          fi
        fi
        
        # Automated workflow PRs
        if [[ "$HEAD_REF" =~ ^automated/ ]]; then
          if [[ "$LABELS" =~ "automated" ]] && [[ "$LABELS" =~ "schema-update|dependencies" ]]; then
            ELIGIBLE=true
            echo "✅ Automated workflow PR eligible for auto-merge"
          fi
        fi
        
        # Check other conditions
        if [[ "$DRAFT" == "true" ]]; then
          ELIGIBLE=false
          echo "❌ PR is draft, not eligible for auto-merge"
        fi
        
        if [[ "$MERGEABLE" != "true" ]] && [[ "$MERGEABLE" != "null" ]]; then
          ELIGIBLE=false
          echo "❌ PR has merge conflicts, not eligible for auto-merge"
        fi
        
        if [[ "$BASE_REF" != "main" ]]; then
          ELIGIBLE=false
          echo "❌ PR not targeting main branch, not eligible for auto-merge"
        fi
        
        echo "eligible=$ELIGIBLE" >> $GITHUB_OUTPUT

    - name: Wait for checks to complete
      if: steps.eligible.outputs.eligible == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });
          
          const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });
          
          // Check if all required checks are completed and successful
          const requiredChecks = ['test', 'lint', 'security'];
          const allChecks = [...checks.check_runs, ...statuses.map(s => ({
            name: s.context,
            status: s.state === 'success' ? 'completed' : s.state,
            conclusion: s.state
          }))];
          
          console.log('All checks:', allChecks.map(c => `${c.name}: ${c.status}/${c.conclusion}`));
          
          const pendingChecks = allChecks.filter(check => 
            check.status === 'in_progress' || 
            check.status === 'queued' ||
            check.status === 'pending'
          );
          
          if (pendingChecks.length > 0) {
            console.log('Waiting for checks to complete:', pendingChecks.map(c => c.name));
            // Wait a bit and try again
            setTimeout(() => process.exit(1), 30000); // Wait 30 seconds then fail (will retry)
            return;
          }
          
          const failedChecks = allChecks.filter(check => 
            check.conclusion === 'failure' || 
            check.conclusion === 'error' ||
            check.conclusion === 'cancelled'
          );
          
          if (failedChecks.length > 0) {
            console.log('❌ Some checks failed:', failedChecks.map(c => c.name));
            process.exit(1);
          }
          
          console.log('✅ All checks passed');

    - name: Auto-approve PR
      if: steps.eligible.outputs.eligible == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.pulls.createReview({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            event: 'APPROVE',
            body: '✅ Auto-approving automated PR - all checks passed'
          });

    - name: Enable auto-merge
      if: steps.eligible.outputs.eligible == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            auto_merge: {
              merge_method: 'squash'
            }
          });
          
          console.log('✅ Auto-merge enabled for PR');

    - name: Add comment
      if: steps.eligible.outputs.eligible == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: '🤖 **Auto-merge enabled**\n\nThis PR meets the criteria for automatic merging:\n- ✅ All checks passed\n- ✅ Automated/dependency update\n- ✅ No major version changes\n- ✅ Approved\n\nThe PR will be automatically merged when all requirements are met.'
          });

  cleanup:
    name: Cleanup merged PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
    - name: Delete branch
      if: startsWith(github.head_ref, 'automated/') || startsWith(github.head_ref, 'dependabot/')
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/' + context.payload.pull_request.head.ref
            });
            console.log('✅ Deleted branch:', context.payload.pull_request.head.ref);
          } catch (error) {
            console.log('Branch already deleted or does not exist');
          }