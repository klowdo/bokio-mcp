name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Fetch all tags
      run: git fetch --force --tags

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true
        cache-dependency-path: go.sum

    - name: Install dependencies
      run: make deps

    - name: Install tools
      run: make install-tools

    - name: Generate types
      run: make generate-types

    - name: Install cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.4'

    - name: Install syft
      uses: anchore/sbom-action/download-syft@v0

    - name: Create .goreleaser.yml if not exists
      run: |
        if [ ! -f .goreleaser.yml ]; then
          cat > .goreleaser.yml << 'EOF'
        version: 2

        project_name: bokio-mcp

        before:
          hooks:
            - go mod tidy
            - make generate-types

        builds:
          - id: bokio-mcp
            binary: bokio-mcp
            env:
              - CGO_ENABLED=0
            goos:
              - linux
              - windows
              - darwin
            goarch:
              - amd64
              - arm64
            ignore:
              - goos: windows
                goarch: arm64
            ldflags:
              - -s -w
              - -X main.Version={{.Version}}
              - -X main.BuildTime={{.Date}}
              - -X main.GitCommit={{.ShortCommit}}
            mod_timestamp: '{{ .CommitTimestamp }}'

        archives:
          - id: bokio-mcp
            format: tar.gz
            name_template: >-
              {{ .ProjectName }}_
              {{- title .Os }}_
              {{- if eq .Arch "amd64" }}x86_64
              {{- else if eq .Arch "386" }}i386
              {{- else }}{{ .Arch }}{{ end }}
              {{- if .Arm }}v{{ .Arm }}{{ end }}
            format_overrides:
              - goos: windows
                format: zip
            files:
              - README.md
              - LICENSE
              - schemas/*

        checksum:
          name_template: 'checksums.txt'
          algorithm: sha256

        snapshot:
          name_template: "{{ incpatch .Version }}-next"

        changelog:
          sort: asc
          use: github
          filters:
            exclude:
              - '^docs:'
              - '^test:'
              - '^chore:'
              - '^ci:'
          groups:
            - title: 'New Features'
              regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
              order: 0
            - title: 'Bug Fixes'
              regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
              order: 1
            - title: 'Performance Improvements'
              regexp: '^.*?perf(\([[:word:]]+\))??!?:.+$'
              order: 2
            - title: 'Refactors'
              regexp: '^.*?refactor(\([[:word:]]+\))??!?:.+$'
              order: 3
            - title: 'Documentation'
              regexp: '^.*?docs(\([[:word:]]+\))??!?:.+$'
              order: 4
            - title: 'Others'
              order: 999

        release:
          github:
            owner: klowdo
            name: bokio-mcp
          name_template: "Release {{.Tag}}"
          mode: replace
          draft: false
          prerelease: auto

        signs:
          - cmd: cosign
            signature: "${artifact}.sig"
            certificate: "${artifact}.pem"
            args:
              - "sign-blob"
              - "--output-signature=${signature}"
              - "--output-certificate=${certificate}"
              - "${artifact}"
              - "--yes"
            artifacts: checksum

        sboms:
          - id: archive
            artifacts: archive
            cmd: syft
            args: ["$artifact", "--file", "${document}", "--output", "spdx-json"]
            documents:
              - "{{ .ProjectName }}_{{ .Version }}_sbom.spdx.json"

        docker_manifests:
          - name_template: "{{ .Env.REGISTRY }}/{{ .Env.IMAGE_NAME }}:{{ .Tag }}"
            image_templates:
              - "{{ .Env.REGISTRY }}/{{ .Env.IMAGE_NAME }}:{{ .Tag }}-amd64"
              - "{{ .Env.REGISTRY }}/{{ .Env.IMAGE_NAME }}:{{ .Tag }}-arm64"
          - name_template: "{{ .Env.REGISTRY }}/{{ .Env.IMAGE_NAME }}:latest"
            image_templates:
              - "{{ .Env.REGISTRY }}/{{ .Env.IMAGE_NAME }}:{{ .Tag }}-amd64"
              - "{{ .Env.REGISTRY }}/{{ .Env.IMAGE_NAME }}:{{ .Tag }}-arm64"

        dockers:
          - image_templates:
              - "{{ .Env.REGISTRY }}/{{ .Env.IMAGE_NAME }}:{{ .Tag }}-amd64"
            dockerfile: Dockerfile
            use: buildx
            build_flag_templates:
              - "--pull"
              - "--label=org.opencontainers.image.created={{.Date}}"
              - "--label=org.opencontainers.image.title={{.ProjectName}}"
              - "--label=org.opencontainers.image.revision={{.FullCommit}}"
              - "--label=org.opencontainers.image.version={{.Version}}"
              - "--label=org.opencontainers.image.source={{.GitURL}}"
              - "--platform=linux/amd64"
            goarch: amd64
          - image_templates:
              - "{{ .Env.REGISTRY }}/{{ .Env.IMAGE_NAME }}:{{ .Tag }}-arm64"
            dockerfile: Dockerfile
            use: buildx
            build_flag_templates:
              - "--pull"
              - "--label=org.opencontainers.image.created={{.Date}}"
              - "--label=org.opencontainers.image.title={{.ProjectName}}"
              - "--label=org.opencontainers.image.revision={{.FullCommit}}"
              - "--label=org.opencontainers.image.version={{.Version}}"
              - "--label=org.opencontainers.image.source={{.GitURL}}"
              - "--platform=linux/arm64"
            goarch: arm64
        EOF
        fi

    - name: Create Dockerfile if not exists
      run: |
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        FROM alpine:latest

        RUN apk --no-cache add ca-certificates tzdata
        WORKDIR /root/

        COPY bokio-mcp /usr/local/bin/bokio-mcp

        EXPOSE 8080

        ENTRYPOINT ["/usr/local/bin/bokio-mcp"]
        EOF
        fi

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COSIGN_EXPERIMENTAL: 1

    - name: Upload assets to release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.tar.gz
          dist/*.zip
          dist/checksums.txt
          dist/*.sig
          dist/*.pem
          dist/*_sbom.spdx.json
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [goreleaser]
    if: always()

    steps:
    - name: Get release info
      id: release_info
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "release_url=https://github.com/${{ github.repository }}/releases/tag/${TAG_NAME}" >> $GITHUB_OUTPUT

    - name: Release notification
      run: |
        if [ "${{ needs.goreleaser.result }}" = "success" ]; then
          echo "✅ Release ${{ steps.release_info.outputs.tag_name }} published successfully!"
          echo "🔗 Release URL: ${{ steps.release_info.outputs.release_url }}"
        else
          echo "❌ Release ${{ steps.release_info.outputs.tag_name }} failed!"
          exit 1
        fi
