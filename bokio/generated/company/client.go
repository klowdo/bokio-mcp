//go:build !ignore

// Package company provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
//
package company

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCustomer request
	GetCustomer(ctx context.Context, companyId openapi_types.UUID, params *GetCustomerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCustomerWithBody request with any body
	PostCustomerWithBody(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCustomer(ctx context.Context, companyId openapi_types.UUID, body PostCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomer request
	DeleteCustomer(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomersCustomerId request
	GetCustomersCustomerId(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCustomerWithBody request with any body
	PutCustomerWithBody(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCustomer(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, body PutCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFiscalYears request
	GetFiscalYears(ctx context.Context, companyId openapi_types.UUID, params *GetFiscalYearsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFiscalYearWithId request
	GetFiscalYearWithId(ctx context.Context, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoice request
	GetInvoice(ctx context.Context, companyId openapi_types.UUID, params *GetInvoiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoiceWithBody request with any body
	PostInvoiceWithBody(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvoice(ctx context.Context, companyId openapi_types.UUID, body PostInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoicesInvoiceId request
	GetInvoicesInvoiceId(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInvoiceWithBody request with any body
	PutInvoiceWithBody(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutInvoice(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PutInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoiceAttachments request
	GetInvoiceAttachments(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *GetInvoiceAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoiceAttachmentWithBody request with any body
	PostInvoiceAttachmentWithBody(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *PostInvoiceAttachmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvoiceAttachment request
	DeleteInvoiceAttachment(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoiceAttachment request
	GetInvoiceAttachment(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadInvoiceAttachment request
	DownloadInvoiceAttachment(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInvoiceLineItemWithBody request with any body
	PostInvoiceLineItemWithBody(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInvoiceLineItem(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PostInvoiceLineItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItems request
	GetItems(ctx context.Context, companyId openapi_types.UUID, params *GetItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostItemWithBody request with any body
	PostItemWithBody(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostItem(ctx context.Context, companyId openapi_types.UUID, body PostItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteItem request
	DeleteItem(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemsItemId request
	GetItemsItemId(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutItemWithBody request with any body
	PutItemWithBody(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutItem(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, body PutItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJournalentry request
	GetJournalentry(ctx context.Context, companyId openapi_types.UUID, params *GetJournalentryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostJournalentryWithBody request with any body
	PostJournalentryWithBody(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostJournalentry(ctx context.Context, companyId openapi_types.UUID, body PostJournalentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJournalentriesJournalId request
	GetJournalentriesJournalId(ctx context.Context, companyId openapi_types.UUID, journalEntryId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReverseJournalentry request
	ReverseJournalentry(ctx context.Context, companyId openapi_types.UUID, journalEntryId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadSieFile request
	DownloadSieFile(ctx context.Context, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUploads request
	GetUploads(ctx context.Context, companyId openapi_types.UUID, params *GetUploadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddUploadWithBody request with any body
	AddUploadWithBody(ctx context.Context, companyId openapi_types.UUID, params *AddUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpload request
	GetUpload(ctx context.Context, companyId openapi_types.UUID, uploadId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadUpload request
	DownloadUpload(ctx context.Context, companyId openapi_types.UUID, uploadId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCustomer(ctx context.Context, companyId openapi_types.UUID, params *GetCustomerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomerWithBody(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCustomer(ctx context.Context, companyId openapi_types.UUID, body PostCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCustomerRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomer(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomerRequest(c.Server, companyId, customerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomersCustomerId(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomersCustomerIdRequest(c.Server, companyId, customerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomerWithBody(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerRequestWithBody(c.Server, companyId, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCustomer(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, body PutCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCustomerRequest(c.Server, companyId, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFiscalYears(ctx context.Context, companyId openapi_types.UUID, params *GetFiscalYearsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFiscalYearsRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFiscalYearWithId(ctx context.Context, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFiscalYearWithIdRequest(c.Server, companyId, fiscalYearId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoice(ctx context.Context, companyId openapi_types.UUID, params *GetInvoiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoiceWithBody(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoiceRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoice(ctx context.Context, companyId openapi_types.UUID, body PostInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoiceRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoicesInvoiceId(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoicesInvoiceIdRequest(c.Server, companyId, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoiceWithBody(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoiceRequestWithBody(c.Server, companyId, invoiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInvoice(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PutInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInvoiceRequest(c.Server, companyId, invoiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoiceAttachments(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *GetInvoiceAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceAttachmentsRequest(c.Server, companyId, invoiceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoiceAttachmentWithBody(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *PostInvoiceAttachmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoiceAttachmentRequestWithBody(c.Server, companyId, invoiceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvoiceAttachment(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvoiceAttachmentRequest(c.Server, companyId, invoiceId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoiceAttachment(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceAttachmentRequest(c.Server, companyId, invoiceId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadInvoiceAttachment(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadInvoiceAttachmentRequest(c.Server, companyId, invoiceId, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoiceLineItemWithBody(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoiceLineItemRequestWithBody(c.Server, companyId, invoiceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInvoiceLineItem(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PostInvoiceLineItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInvoiceLineItemRequest(c.Server, companyId, invoiceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItems(ctx context.Context, companyId openapi_types.UUID, params *GetItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemsRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostItemWithBody(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostItemRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostItem(ctx context.Context, companyId openapi_types.UUID, body PostItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostItemRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteItem(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteItemRequest(c.Server, companyId, itemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemsItemId(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemsItemIdRequest(c.Server, companyId, itemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutItemWithBody(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutItemRequestWithBody(c.Server, companyId, itemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutItem(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, body PutItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutItemRequest(c.Server, companyId, itemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJournalentry(ctx context.Context, companyId openapi_types.UUID, params *GetJournalentryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJournalentryRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJournalentryWithBody(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJournalentryRequestWithBody(c.Server, companyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostJournalentry(ctx context.Context, companyId openapi_types.UUID, body PostJournalentryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostJournalentryRequest(c.Server, companyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJournalentriesJournalId(ctx context.Context, companyId openapi_types.UUID, journalEntryId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJournalentriesJournalIdRequest(c.Server, companyId, journalEntryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReverseJournalentry(ctx context.Context, companyId openapi_types.UUID, journalEntryId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReverseJournalentryRequest(c.Server, companyId, journalEntryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadSieFile(ctx context.Context, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadSieFileRequest(c.Server, companyId, fiscalYearId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUploads(ctx context.Context, companyId openapi_types.UUID, params *GetUploadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadsRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddUploadWithBody(ctx context.Context, companyId openapi_types.UUID, params *AddUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddUploadRequestWithBody(c.Server, companyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpload(ctx context.Context, companyId openapi_types.UUID, uploadId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUploadRequest(c.Server, companyId, uploadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadUpload(ctx context.Context, companyId openapi_types.UUID, uploadId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadUploadRequest(c.Server, companyId, uploadId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCustomerRequest generates requests for GetCustomer
func NewGetCustomerRequest(server string, companyId openapi_types.UUID, params *GetCustomerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/customers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCustomerRequest calls the generic PostCustomer builder with application/json body
func NewPostCustomerRequest(server string, companyId openapi_types.UUID, body PostCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCustomerRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewPostCustomerRequestWithBody generates requests for PostCustomer with any type of body
func NewPostCustomerRequestWithBody(server string, companyId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/customers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomerRequest generates requests for DeleteCustomer
func NewDeleteCustomerRequest(server string, companyId openapi_types.UUID, customerId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/customers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomersCustomerIdRequest generates requests for GetCustomersCustomerId
func NewGetCustomersCustomerIdRequest(server string, companyId openapi_types.UUID, customerId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/customers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutCustomerRequest calls the generic PutCustomer builder with application/json body
func NewPutCustomerRequest(server string, companyId openapi_types.UUID, customerId openapi_types.UUID, body PutCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCustomerRequestWithBody(server, companyId, customerId, "application/json", bodyReader)
}

// NewPutCustomerRequestWithBody generates requests for PutCustomer with any type of body
func NewPutCustomerRequestWithBody(server string, companyId openapi_types.UUID, customerId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/customers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFiscalYearsRequest generates requests for GetFiscalYears
func NewGetFiscalYearsRequest(server string, companyId openapi_types.UUID, params *GetFiscalYearsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/fiscal-years", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFiscalYearWithIdRequest generates requests for GetFiscalYearWithId
func NewGetFiscalYearWithIdRequest(server string, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fiscalYearId", runtime.ParamLocationPath, fiscalYearId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/fiscal-years/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceRequest generates requests for GetInvoice
func NewGetInvoiceRequest(server string, companyId openapi_types.UUID, params *GetInvoiceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvoiceRequest calls the generic PostInvoice builder with application/json body
func NewPostInvoiceRequest(server string, companyId openapi_types.UUID, body PostInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvoiceRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewPostInvoiceRequestWithBody generates requests for PostInvoice with any type of body
func NewPostInvoiceRequestWithBody(server string, companyId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInvoicesInvoiceIdRequest generates requests for GetInvoicesInvoiceId
func NewGetInvoicesInvoiceIdRequest(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutInvoiceRequest calls the generic PutInvoice builder with application/json body
func NewPutInvoiceRequest(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PutInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutInvoiceRequestWithBody(server, companyId, invoiceId, "application/json", bodyReader)
}

// NewPutInvoiceRequestWithBody generates requests for PutInvoice with any type of body
func NewPutInvoiceRequestWithBody(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInvoiceAttachmentsRequest generates requests for GetInvoiceAttachments
func NewGetInvoiceAttachmentsRequest(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *GetInvoiceAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices/%s/attachments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvoiceAttachmentRequestWithBody generates requests for PostInvoiceAttachment with any type of body
func NewPostInvoiceAttachmentRequestWithBody(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *PostInvoiceAttachmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices/%s/attachments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam0)

	}

	return req, nil
}

// NewDeleteInvoiceAttachmentRequest generates requests for DeleteInvoiceAttachment
func NewDeleteInvoiceAttachmentRequest(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices/%s/attachments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceAttachmentRequest generates requests for GetInvoiceAttachment
func NewGetInvoiceAttachmentRequest(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices/%s/attachments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadInvoiceAttachmentRequest generates requests for DownloadInvoiceAttachment
func NewDownloadInvoiceAttachmentRequest(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices/%s/attachments/%s/download", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInvoiceLineItemRequest calls the generic PostInvoiceLineItem builder with application/json body
func NewPostInvoiceLineItemRequest(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PostInvoiceLineItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInvoiceLineItemRequestWithBody(server, companyId, invoiceId, "application/json", bodyReader)
}

// NewPostInvoiceLineItemRequestWithBody generates requests for PostInvoiceLineItem with any type of body
func NewPostInvoiceLineItemRequestWithBody(server string, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoiceId", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/invoices/%s/line-items", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetItemsRequest generates requests for GetItems
func NewGetItemsRequest(server string, companyId openapi_types.UUID, params *GetItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostItemRequest calls the generic PostItem builder with application/json body
func NewPostItemRequest(server string, companyId openapi_types.UUID, body PostItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostItemRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewPostItemRequestWithBody generates requests for PostItem with any type of body
func NewPostItemRequestWithBody(server string, companyId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteItemRequest generates requests for DeleteItem
func NewDeleteItemRequest(server string, companyId openapi_types.UUID, itemId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetItemsItemIdRequest generates requests for GetItemsItemId
func NewGetItemsItemIdRequest(server string, companyId openapi_types.UUID, itemId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutItemRequest calls the generic PutItem builder with application/json body
func NewPutItemRequest(server string, companyId openapi_types.UUID, itemId openapi_types.UUID, body PutItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutItemRequestWithBody(server, companyId, itemId, "application/json", bodyReader)
}

// NewPutItemRequestWithBody generates requests for PutItem with any type of body
func NewPutItemRequestWithBody(server string, companyId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJournalentryRequest generates requests for GetJournalentry
func NewGetJournalentryRequest(server string, companyId openapi_types.UUID, params *GetJournalentryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/journal-entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostJournalentryRequest calls the generic PostJournalentry builder with application/json body
func NewPostJournalentryRequest(server string, companyId openapi_types.UUID, body PostJournalentryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostJournalentryRequestWithBody(server, companyId, "application/json", bodyReader)
}

// NewPostJournalentryRequestWithBody generates requests for PostJournalentry with any type of body
func NewPostJournalentryRequestWithBody(server string, companyId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/journal-entries", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJournalentriesJournalIdRequest generates requests for GetJournalentriesJournalId
func NewGetJournalentriesJournalIdRequest(server string, companyId openapi_types.UUID, journalEntryId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "journalEntryId", runtime.ParamLocationPath, journalEntryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/journal-entries/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReverseJournalentryRequest generates requests for ReverseJournalentry
func NewReverseJournalentryRequest(server string, companyId openapi_types.UUID, journalEntryId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "journalEntryId", runtime.ParamLocationPath, journalEntryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/journal-entries/%s/reverse", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadSieFileRequest generates requests for DownloadSieFile
func NewDownloadSieFileRequest(server string, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "fiscalYearId", runtime.ParamLocationPath, fiscalYearId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/sie/%s/download", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUploadsRequest generates requests for GetUploads
func NewGetUploadsRequest(server string, companyId openapi_types.UUID, params *GetUploadsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/uploads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUploadRequestWithBody generates requests for AddUpload with any type of body
func NewAddUploadRequestWithBody(server string, companyId openapi_types.UUID, params *AddUploadParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/uploads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam0)

	}

	return req, nil
}

// NewGetUploadRequest generates requests for GetUpload
func NewGetUploadRequest(server string, companyId openapi_types.UUID, uploadId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "uploadId", runtime.ParamLocationPath, uploadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/uploads/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadUploadRequest generates requests for DownloadUpload
func NewDownloadUploadRequest(server string, companyId openapi_types.UUID, uploadId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "uploadId", runtime.ParamLocationPath, uploadId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/companies/%s/uploads/%s/download", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCustomerWithResponse request
	GetCustomerWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetCustomerParams, reqEditors ...RequestEditorFn) (*GetCustomerResponse, error)

	// PostCustomerWithBodyWithResponse request with any body
	PostCustomerWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerResponse, error)

	PostCustomerWithResponse(ctx context.Context, companyId openapi_types.UUID, body PostCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerResponse, error)

	// DeleteCustomerWithResponse request
	DeleteCustomerWithResponse(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteCustomerResponse, error)

	// GetCustomersCustomerIdWithResponse request
	GetCustomersCustomerIdWithResponse(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCustomersCustomerIdResponse, error)

	// PutCustomerWithBodyWithResponse request with any body
	PutCustomerWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerResponse, error)

	PutCustomerWithResponse(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, body PutCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerResponse, error)

	// GetFiscalYearsWithResponse request
	GetFiscalYearsWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetFiscalYearsParams, reqEditors ...RequestEditorFn) (*GetFiscalYearsResponse, error)

	// GetFiscalYearWithIdWithResponse request
	GetFiscalYearWithIdWithResponse(ctx context.Context, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetFiscalYearWithIdResponse, error)

	// GetInvoiceWithResponse request
	GetInvoiceWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetInvoiceParams, reqEditors ...RequestEditorFn) (*GetInvoiceResponse, error)

	// PostInvoiceWithBodyWithResponse request with any body
	PostInvoiceWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoiceResponse, error)

	PostInvoiceWithResponse(ctx context.Context, companyId openapi_types.UUID, body PostInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoiceResponse, error)

	// GetInvoicesInvoiceIdWithResponse request
	GetInvoicesInvoiceIdWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvoicesInvoiceIdResponse, error)

	// PutInvoiceWithBodyWithResponse request with any body
	PutInvoiceWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoiceResponse, error)

	PutInvoiceWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PutInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoiceResponse, error)

	// GetInvoiceAttachmentsWithResponse request
	GetInvoiceAttachmentsWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *GetInvoiceAttachmentsParams, reqEditors ...RequestEditorFn) (*GetInvoiceAttachmentsResponse, error)

	// PostInvoiceAttachmentWithBodyWithResponse request with any body
	PostInvoiceAttachmentWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *PostInvoiceAttachmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoiceAttachmentResponse, error)

	// DeleteInvoiceAttachmentWithResponse request
	DeleteInvoiceAttachmentWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInvoiceAttachmentResponse, error)

	// GetInvoiceAttachmentWithResponse request
	GetInvoiceAttachmentWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvoiceAttachmentResponse, error)

	// DownloadInvoiceAttachmentWithResponse request
	DownloadInvoiceAttachmentWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadInvoiceAttachmentResponse, error)

	// PostInvoiceLineItemWithBodyWithResponse request with any body
	PostInvoiceLineItemWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoiceLineItemResponse, error)

	PostInvoiceLineItemWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PostInvoiceLineItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoiceLineItemResponse, error)

	// GetItemsWithResponse request
	GetItemsWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetItemsParams, reqEditors ...RequestEditorFn) (*GetItemsResponse, error)

	// PostItemWithBodyWithResponse request with any body
	PostItemWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostItemResponse, error)

	PostItemWithResponse(ctx context.Context, companyId openapi_types.UUID, body PostItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostItemResponse, error)

	// DeleteItemWithResponse request
	DeleteItemWithResponse(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteItemResponse, error)

	// GetItemsItemIdWithResponse request
	GetItemsItemIdWithResponse(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetItemsItemIdResponse, error)

	// PutItemWithBodyWithResponse request with any body
	PutItemWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutItemResponse, error)

	PutItemWithResponse(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, body PutItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutItemResponse, error)

	// GetJournalentryWithResponse request
	GetJournalentryWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetJournalentryParams, reqEditors ...RequestEditorFn) (*GetJournalentryResponse, error)

	// PostJournalentryWithBodyWithResponse request with any body
	PostJournalentryWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJournalentryResponse, error)

	PostJournalentryWithResponse(ctx context.Context, companyId openapi_types.UUID, body PostJournalentryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJournalentryResponse, error)

	// GetJournalentriesJournalIdWithResponse request
	GetJournalentriesJournalIdWithResponse(ctx context.Context, companyId openapi_types.UUID, journalEntryId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetJournalentriesJournalIdResponse, error)

	// ReverseJournalentryWithResponse request
	ReverseJournalentryWithResponse(ctx context.Context, companyId openapi_types.UUID, journalEntryId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ReverseJournalentryResponse, error)

	// DownloadSieFileWithResponse request
	DownloadSieFileWithResponse(ctx context.Context, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadSieFileResponse, error)

	// GetUploadsWithResponse request
	GetUploadsWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetUploadsParams, reqEditors ...RequestEditorFn) (*GetUploadsResponse, error)

	// AddUploadWithBodyWithResponse request with any body
	AddUploadWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, params *AddUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUploadResponse, error)

	// GetUploadWithResponse request
	GetUploadWithResponse(ctx context.Context, companyId openapi_types.UUID, uploadId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUploadResponse, error)

	// DownloadUploadWithResponse request
	DownloadUploadWithResponse(ctx context.Context, companyId openapi_types.UUID, uploadId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadUploadResponse, error)
}

type GetCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CurrentPage *int32      `json:"currentPage,omitempty"`
		Items       *[]Customer `json:"items,omitempty"`
		TotalItems  *int32      `json:"totalItems,omitempty"`
		TotalPages  *int32      `json:"totalPages,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomersCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetCustomersCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomersCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFiscalYearsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CurrentPage *int32         `json:"currentPage,omitempty"`
		Items       *[]interface{} `json:"items,omitempty"`
		TotalItems  *int32         `json:"totalItems,omitempty"`
		TotalPages  *int32         `json:"totalPages,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFiscalYearsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFiscalYearsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFiscalYearWithIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		FiscalYear *FiscalYear `json:"fiscalYear,omitempty"`
	}
	JSON404 *ApiError
}

// Status returns HTTPResponse.Status
func (r GetFiscalYearWithIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFiscalYearWithIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CurrentPage *int32     `json:"currentPage,omitempty"`
		Items       *[]Invoice `json:"items,omitempty"`
		TotalItems  *int32     `json:"totalItems,omitempty"`
		TotalPages  *int32     `json:"totalPages,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoicesInvoiceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetInvoicesInvoiceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoicesInvoiceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Invoice
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PutInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CurrentPage *int32               `json:"currentPage,omitempty"`
		Items       *[]InvoiceAttachment `json:"items,omitempty"`
		TotalItems  *int32               `json:"totalItems,omitempty"`
		TotalPages  *int32               `json:"totalPages,omitempty"`
	}
	JSON404 *ApiError
}

// Status returns HTTPResponse.Status
func (r GetInvoiceAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoiceAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *ApiError
	JSON404 *ApiError
}

// Status returns HTTPResponse.Status
func (r PostInvoiceAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoiceAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvoiceAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DeleteInvoiceAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvoiceAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceAttachment
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetInvoiceAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadInvoiceAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DownloadInvoiceAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadInvoiceAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInvoiceLineItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *ApiError
	JSON404 *ApiError
}

// Status returns HTTPResponse.Status
func (r PostInvoiceLineItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInvoiceLineItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CurrentPage *int32         `json:"currentPage,omitempty"`
		Items       *[]interface{} `json:"items,omitempty"`
		TotalItems  *int32         `json:"totalItems,omitempty"`
		TotalPages  *int32         `json:"totalPages,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *ApiError
}

// Status returns HTTPResponse.Status
func (r PostItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemsItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON404 *ApiError
}

// Status returns HTTPResponse.Status
func (r GetItemsItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemsItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON400 *ApiError
}

// Status returns HTTPResponse.Status
func (r PutItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJournalentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CurrentPage *int32          `json:"currentPage,omitempty"`
		Items       *[]JournalEntry `json:"items,omitempty"`
		TotalItems  *int32          `json:"totalItems,omitempty"`
		TotalPages  *int32          `json:"totalPages,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetJournalentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJournalentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostJournalentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JournalEntry
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r PostJournalentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostJournalentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJournalentriesJournalIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JournalEntry
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetJournalentriesJournalIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJournalentriesJournalIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReverseJournalentryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JournalEntry
	JSON400      *ApiError
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r ReverseJournalentryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReverseJournalentryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadSieFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DownloadSieFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadSieFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUploadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CurrentPage *int32    `json:"currentPage,omitempty"`
		Items       *[]Upload `json:"items,omitempty"`
		TotalItems  *int32    `json:"totalItems,omitempty"`
		TotalPages  *int32    `json:"totalPages,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUploadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUploadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Upload
	JSON400      *ApiError
}

// Status returns HTTPResponse.Status
func (r AddUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Upload
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r GetUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ApiError
}

// Status returns HTTPResponse.Status
func (r DownloadUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCustomerWithResponse request returning *GetCustomerResponse
func (c *ClientWithResponses) GetCustomerWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetCustomerParams, reqEditors ...RequestEditorFn) (*GetCustomerResponse, error) {
	rsp, err := c.GetCustomer(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerResponse(rsp)
}

// PostCustomerWithBodyWithResponse request with arbitrary body returning *PostCustomerResponse
func (c *ClientWithResponses) PostCustomerWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCustomerResponse, error) {
	rsp, err := c.PostCustomerWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerResponse(rsp)
}

func (c *ClientWithResponses) PostCustomerWithResponse(ctx context.Context, companyId openapi_types.UUID, body PostCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCustomerResponse, error) {
	rsp, err := c.PostCustomer(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCustomerResponse(rsp)
}

// DeleteCustomerWithResponse request returning *DeleteCustomerResponse
func (c *ClientWithResponses) DeleteCustomerWithResponse(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteCustomerResponse, error) {
	rsp, err := c.DeleteCustomer(ctx, companyId, customerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomerResponse(rsp)
}

// GetCustomersCustomerIdWithResponse request returning *GetCustomersCustomerIdResponse
func (c *ClientWithResponses) GetCustomersCustomerIdWithResponse(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetCustomersCustomerIdResponse, error) {
	rsp, err := c.GetCustomersCustomerId(ctx, companyId, customerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomersCustomerIdResponse(rsp)
}

// PutCustomerWithBodyWithResponse request with arbitrary body returning *PutCustomerResponse
func (c *ClientWithResponses) PutCustomerWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCustomerResponse, error) {
	rsp, err := c.PutCustomerWithBody(ctx, companyId, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerResponse(rsp)
}

func (c *ClientWithResponses) PutCustomerWithResponse(ctx context.Context, companyId openapi_types.UUID, customerId openapi_types.UUID, body PutCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCustomerResponse, error) {
	rsp, err := c.PutCustomer(ctx, companyId, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCustomerResponse(rsp)
}

// GetFiscalYearsWithResponse request returning *GetFiscalYearsResponse
func (c *ClientWithResponses) GetFiscalYearsWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetFiscalYearsParams, reqEditors ...RequestEditorFn) (*GetFiscalYearsResponse, error) {
	rsp, err := c.GetFiscalYears(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFiscalYearsResponse(rsp)
}

// GetFiscalYearWithIdWithResponse request returning *GetFiscalYearWithIdResponse
func (c *ClientWithResponses) GetFiscalYearWithIdWithResponse(ctx context.Context, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetFiscalYearWithIdResponse, error) {
	rsp, err := c.GetFiscalYearWithId(ctx, companyId, fiscalYearId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFiscalYearWithIdResponse(rsp)
}

// GetInvoiceWithResponse request returning *GetInvoiceResponse
func (c *ClientWithResponses) GetInvoiceWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetInvoiceParams, reqEditors ...RequestEditorFn) (*GetInvoiceResponse, error) {
	rsp, err := c.GetInvoice(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceResponse(rsp)
}

// PostInvoiceWithBodyWithResponse request with arbitrary body returning *PostInvoiceResponse
func (c *ClientWithResponses) PostInvoiceWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoiceResponse, error) {
	rsp, err := c.PostInvoiceWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoiceResponse(rsp)
}

func (c *ClientWithResponses) PostInvoiceWithResponse(ctx context.Context, companyId openapi_types.UUID, body PostInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoiceResponse, error) {
	rsp, err := c.PostInvoice(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoiceResponse(rsp)
}

// GetInvoicesInvoiceIdWithResponse request returning *GetInvoicesInvoiceIdResponse
func (c *ClientWithResponses) GetInvoicesInvoiceIdWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvoicesInvoiceIdResponse, error) {
	rsp, err := c.GetInvoicesInvoiceId(ctx, companyId, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoicesInvoiceIdResponse(rsp)
}

// PutInvoiceWithBodyWithResponse request with arbitrary body returning *PutInvoiceResponse
func (c *ClientWithResponses) PutInvoiceWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutInvoiceResponse, error) {
	rsp, err := c.PutInvoiceWithBody(ctx, companyId, invoiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoiceResponse(rsp)
}

func (c *ClientWithResponses) PutInvoiceWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PutInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutInvoiceResponse, error) {
	rsp, err := c.PutInvoice(ctx, companyId, invoiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInvoiceResponse(rsp)
}

// GetInvoiceAttachmentsWithResponse request returning *GetInvoiceAttachmentsResponse
func (c *ClientWithResponses) GetInvoiceAttachmentsWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *GetInvoiceAttachmentsParams, reqEditors ...RequestEditorFn) (*GetInvoiceAttachmentsResponse, error) {
	rsp, err := c.GetInvoiceAttachments(ctx, companyId, invoiceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceAttachmentsResponse(rsp)
}

// PostInvoiceAttachmentWithBodyWithResponse request with arbitrary body returning *PostInvoiceAttachmentResponse
func (c *ClientWithResponses) PostInvoiceAttachmentWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, params *PostInvoiceAttachmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoiceAttachmentResponse, error) {
	rsp, err := c.PostInvoiceAttachmentWithBody(ctx, companyId, invoiceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoiceAttachmentResponse(rsp)
}

// DeleteInvoiceAttachmentWithResponse request returning *DeleteInvoiceAttachmentResponse
func (c *ClientWithResponses) DeleteInvoiceAttachmentWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInvoiceAttachmentResponse, error) {
	rsp, err := c.DeleteInvoiceAttachment(ctx, companyId, invoiceId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvoiceAttachmentResponse(rsp)
}

// GetInvoiceAttachmentWithResponse request returning *GetInvoiceAttachmentResponse
func (c *ClientWithResponses) GetInvoiceAttachmentWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvoiceAttachmentResponse, error) {
	rsp, err := c.GetInvoiceAttachment(ctx, companyId, invoiceId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceAttachmentResponse(rsp)
}

// DownloadInvoiceAttachmentWithResponse request returning *DownloadInvoiceAttachmentResponse
func (c *ClientWithResponses) DownloadInvoiceAttachmentWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, attachmentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadInvoiceAttachmentResponse, error) {
	rsp, err := c.DownloadInvoiceAttachment(ctx, companyId, invoiceId, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadInvoiceAttachmentResponse(rsp)
}

// PostInvoiceLineItemWithBodyWithResponse request with arbitrary body returning *PostInvoiceLineItemResponse
func (c *ClientWithResponses) PostInvoiceLineItemWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInvoiceLineItemResponse, error) {
	rsp, err := c.PostInvoiceLineItemWithBody(ctx, companyId, invoiceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoiceLineItemResponse(rsp)
}

func (c *ClientWithResponses) PostInvoiceLineItemWithResponse(ctx context.Context, companyId openapi_types.UUID, invoiceId openapi_types.UUID, body PostInvoiceLineItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInvoiceLineItemResponse, error) {
	rsp, err := c.PostInvoiceLineItem(ctx, companyId, invoiceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInvoiceLineItemResponse(rsp)
}

// GetItemsWithResponse request returning *GetItemsResponse
func (c *ClientWithResponses) GetItemsWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetItemsParams, reqEditors ...RequestEditorFn) (*GetItemsResponse, error) {
	rsp, err := c.GetItems(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemsResponse(rsp)
}

// PostItemWithBodyWithResponse request with arbitrary body returning *PostItemResponse
func (c *ClientWithResponses) PostItemWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostItemResponse, error) {
	rsp, err := c.PostItemWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostItemResponse(rsp)
}

func (c *ClientWithResponses) PostItemWithResponse(ctx context.Context, companyId openapi_types.UUID, body PostItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PostItemResponse, error) {
	rsp, err := c.PostItem(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostItemResponse(rsp)
}

// DeleteItemWithResponse request returning *DeleteItemResponse
func (c *ClientWithResponses) DeleteItemWithResponse(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteItemResponse, error) {
	rsp, err := c.DeleteItem(ctx, companyId, itemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteItemResponse(rsp)
}

// GetItemsItemIdWithResponse request returning *GetItemsItemIdResponse
func (c *ClientWithResponses) GetItemsItemIdWithResponse(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetItemsItemIdResponse, error) {
	rsp, err := c.GetItemsItemId(ctx, companyId, itemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemsItemIdResponse(rsp)
}

// PutItemWithBodyWithResponse request with arbitrary body returning *PutItemResponse
func (c *ClientWithResponses) PutItemWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutItemResponse, error) {
	rsp, err := c.PutItemWithBody(ctx, companyId, itemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutItemResponse(rsp)
}

func (c *ClientWithResponses) PutItemWithResponse(ctx context.Context, companyId openapi_types.UUID, itemId openapi_types.UUID, body PutItemJSONRequestBody, reqEditors ...RequestEditorFn) (*PutItemResponse, error) {
	rsp, err := c.PutItem(ctx, companyId, itemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutItemResponse(rsp)
}

// GetJournalentryWithResponse request returning *GetJournalentryResponse
func (c *ClientWithResponses) GetJournalentryWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetJournalentryParams, reqEditors ...RequestEditorFn) (*GetJournalentryResponse, error) {
	rsp, err := c.GetJournalentry(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJournalentryResponse(rsp)
}

// PostJournalentryWithBodyWithResponse request with arbitrary body returning *PostJournalentryResponse
func (c *ClientWithResponses) PostJournalentryWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostJournalentryResponse, error) {
	rsp, err := c.PostJournalentryWithBody(ctx, companyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJournalentryResponse(rsp)
}

func (c *ClientWithResponses) PostJournalentryWithResponse(ctx context.Context, companyId openapi_types.UUID, body PostJournalentryJSONRequestBody, reqEditors ...RequestEditorFn) (*PostJournalentryResponse, error) {
	rsp, err := c.PostJournalentry(ctx, companyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostJournalentryResponse(rsp)
}

// GetJournalentriesJournalIdWithResponse request returning *GetJournalentriesJournalIdResponse
func (c *ClientWithResponses) GetJournalentriesJournalIdWithResponse(ctx context.Context, companyId openapi_types.UUID, journalEntryId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetJournalentriesJournalIdResponse, error) {
	rsp, err := c.GetJournalentriesJournalId(ctx, companyId, journalEntryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJournalentriesJournalIdResponse(rsp)
}

// ReverseJournalentryWithResponse request returning *ReverseJournalentryResponse
func (c *ClientWithResponses) ReverseJournalentryWithResponse(ctx context.Context, companyId openapi_types.UUID, journalEntryId openapi_types.UUID, reqEditors ...RequestEditorFn) (*ReverseJournalentryResponse, error) {
	rsp, err := c.ReverseJournalentry(ctx, companyId, journalEntryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReverseJournalentryResponse(rsp)
}

// DownloadSieFileWithResponse request returning *DownloadSieFileResponse
func (c *ClientWithResponses) DownloadSieFileWithResponse(ctx context.Context, companyId openapi_types.UUID, fiscalYearId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadSieFileResponse, error) {
	rsp, err := c.DownloadSieFile(ctx, companyId, fiscalYearId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadSieFileResponse(rsp)
}

// GetUploadsWithResponse request returning *GetUploadsResponse
func (c *ClientWithResponses) GetUploadsWithResponse(ctx context.Context, companyId openapi_types.UUID, params *GetUploadsParams, reqEditors ...RequestEditorFn) (*GetUploadsResponse, error) {
	rsp, err := c.GetUploads(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadsResponse(rsp)
}

// AddUploadWithBodyWithResponse request with arbitrary body returning *AddUploadResponse
func (c *ClientWithResponses) AddUploadWithBodyWithResponse(ctx context.Context, companyId openapi_types.UUID, params *AddUploadParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddUploadResponse, error) {
	rsp, err := c.AddUploadWithBody(ctx, companyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddUploadResponse(rsp)
}

// GetUploadWithResponse request returning *GetUploadResponse
func (c *ClientWithResponses) GetUploadWithResponse(ctx context.Context, companyId openapi_types.UUID, uploadId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUploadResponse, error) {
	rsp, err := c.GetUpload(ctx, companyId, uploadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUploadResponse(rsp)
}

// DownloadUploadWithResponse request returning *DownloadUploadResponse
func (c *ClientWithResponses) DownloadUploadWithResponse(ctx context.Context, companyId openapi_types.UUID, uploadId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadUploadResponse, error) {
	rsp, err := c.DownloadUpload(ctx, companyId, uploadId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadUploadResponse(rsp)
}

// ParseGetCustomerResponse parses an HTTP response from a GetCustomerWithResponse call
func ParseGetCustomerResponse(rsp *http.Response) (*GetCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CurrentPage *int32      `json:"currentPage,omitempty"`
			Items       *[]Customer `json:"items,omitempty"`
			TotalItems  *int32      `json:"totalItems,omitempty"`
			TotalPages  *int32      `json:"totalPages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCustomerResponse parses an HTTP response from a PostCustomerWithResponse call
func ParsePostCustomerResponse(rsp *http.Response) (*PostCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteCustomerResponse parses an HTTP response from a DeleteCustomerWithResponse call
func ParseDeleteCustomerResponse(rsp *http.Response) (*DeleteCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomersCustomerIdResponse parses an HTTP response from a GetCustomersCustomerIdWithResponse call
func ParseGetCustomersCustomerIdResponse(rsp *http.Response) (*GetCustomersCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomersCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutCustomerResponse parses an HTTP response from a PutCustomerWithResponse call
func ParsePutCustomerResponse(rsp *http.Response) (*PutCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetFiscalYearsResponse parses an HTTP response from a GetFiscalYearsWithResponse call
func ParseGetFiscalYearsResponse(rsp *http.Response) (*GetFiscalYearsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFiscalYearsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CurrentPage *int32         `json:"currentPage,omitempty"`
			Items       *[]interface{} `json:"items,omitempty"`
			TotalItems  *int32         `json:"totalItems,omitempty"`
			TotalPages  *int32         `json:"totalPages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFiscalYearWithIdResponse parses an HTTP response from a GetFiscalYearWithIdWithResponse call
func ParseGetFiscalYearWithIdResponse(rsp *http.Response) (*GetFiscalYearWithIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFiscalYearWithIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			FiscalYear *FiscalYear `json:"fiscalYear,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetInvoiceResponse parses an HTTP response from a GetInvoiceWithResponse call
func ParseGetInvoiceResponse(rsp *http.Response) (*GetInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CurrentPage *int32     `json:"currentPage,omitempty"`
			Items       *[]Invoice `json:"items,omitempty"`
			TotalItems  *int32     `json:"totalItems,omitempty"`
			TotalPages  *int32     `json:"totalPages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInvoiceResponse parses an HTTP response from a PostInvoiceWithResponse call
func ParsePostInvoiceResponse(rsp *http.Response) (*PostInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetInvoicesInvoiceIdResponse parses an HTTP response from a GetInvoicesInvoiceIdWithResponse call
func ParseGetInvoicesInvoiceIdResponse(rsp *http.Response) (*GetInvoicesInvoiceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoicesInvoiceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutInvoiceResponse parses an HTTP response from a PutInvoiceWithResponse call
func ParsePutInvoiceResponse(rsp *http.Response) (*PutInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Invoice
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetInvoiceAttachmentsResponse parses an HTTP response from a GetInvoiceAttachmentsWithResponse call
func ParseGetInvoiceAttachmentsResponse(rsp *http.Response) (*GetInvoiceAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CurrentPage *int32               `json:"currentPage,omitempty"`
			Items       *[]InvoiceAttachment `json:"items,omitempty"`
			TotalItems  *int32               `json:"totalItems,omitempty"`
			TotalPages  *int32               `json:"totalPages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostInvoiceAttachmentResponse parses an HTTP response from a PostInvoiceAttachmentWithResponse call
func ParsePostInvoiceAttachmentResponse(rsp *http.Response) (*PostInvoiceAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoiceAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteInvoiceAttachmentResponse parses an HTTP response from a DeleteInvoiceAttachmentWithResponse call
func ParseDeleteInvoiceAttachmentResponse(rsp *http.Response) (*DeleteInvoiceAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvoiceAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetInvoiceAttachmentResponse parses an HTTP response from a GetInvoiceAttachmentWithResponse call
func ParseGetInvoiceAttachmentResponse(rsp *http.Response) (*GetInvoiceAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDownloadInvoiceAttachmentResponse parses an HTTP response from a DownloadInvoiceAttachmentWithResponse call
func ParseDownloadInvoiceAttachmentResponse(rsp *http.Response) (*DownloadInvoiceAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadInvoiceAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostInvoiceLineItemResponse parses an HTTP response from a PostInvoiceLineItemWithResponse call
func ParsePostInvoiceLineItemResponse(rsp *http.Response) (*PostInvoiceLineItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInvoiceLineItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetItemsResponse parses an HTTP response from a GetItemsWithResponse call
func ParseGetItemsResponse(rsp *http.Response) (*GetItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CurrentPage *int32         `json:"currentPage,omitempty"`
			Items       *[]interface{} `json:"items,omitempty"`
			TotalItems  *int32         `json:"totalItems,omitempty"`
			TotalPages  *int32         `json:"totalPages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostItemResponse parses an HTTP response from a PostItemWithResponse call
func ParsePostItemResponse(rsp *http.Response) (*PostItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteItemResponse parses an HTTP response from a DeleteItemWithResponse call
func ParseDeleteItemResponse(rsp *http.Response) (*DeleteItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetItemsItemIdResponse parses an HTTP response from a GetItemsItemIdWithResponse call
func ParseGetItemsItemIdResponse(rsp *http.Response) (*GetItemsItemIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemsItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutItemResponse parses an HTTP response from a PutItemWithResponse call
func ParsePutItemResponse(rsp *http.Response) (*PutItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetJournalentryResponse parses an HTTP response from a GetJournalentryWithResponse call
func ParseGetJournalentryResponse(rsp *http.Response) (*GetJournalentryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJournalentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CurrentPage *int32          `json:"currentPage,omitempty"`
			Items       *[]JournalEntry `json:"items,omitempty"`
			TotalItems  *int32          `json:"totalItems,omitempty"`
			TotalPages  *int32          `json:"totalPages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostJournalentryResponse parses an HTTP response from a PostJournalentryWithResponse call
func ParsePostJournalentryResponse(rsp *http.Response) (*PostJournalentryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostJournalentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetJournalentriesJournalIdResponse parses an HTTP response from a GetJournalentriesJournalIdWithResponse call
func ParseGetJournalentriesJournalIdResponse(rsp *http.Response) (*GetJournalentriesJournalIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJournalentriesJournalIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseReverseJournalentryResponse parses an HTTP response from a ReverseJournalentryWithResponse call
func ParseReverseJournalentryResponse(rsp *http.Response) (*ReverseJournalentryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReverseJournalentryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JournalEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDownloadSieFileResponse parses an HTTP response from a DownloadSieFileWithResponse call
func ParseDownloadSieFileResponse(rsp *http.Response) (*DownloadSieFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadSieFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUploadsResponse parses an HTTP response from a GetUploadsWithResponse call
func ParseGetUploadsResponse(rsp *http.Response) (*GetUploadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUploadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CurrentPage *int32    `json:"currentPage,omitempty"`
			Items       *[]Upload `json:"items,omitempty"`
			TotalItems  *int32    `json:"totalItems,omitempty"`
			TotalPages  *int32    `json:"totalPages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUploadResponse parses an HTTP response from a AddUploadWithResponse call
func ParseAddUploadResponse(rsp *http.Response) (*AddUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Upload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUploadResponse parses an HTTP response from a GetUploadWithResponse call
func ParseGetUploadResponse(rsp *http.Response) (*GetUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Upload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDownloadUploadResponse parses an HTTP response from a DownloadUploadWithResponse call
func ParseDownloadUploadResponse(rsp *http.Response) (*DownloadUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}
