//go:build !ignore

// Package company provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package company

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	TokenAuthScopes = "tokenAuth.Scopes"
)

// Defines values for CustomerLanguage.
const (
	En CustomerLanguage = "en"
	Sv CustomerLanguage = "sv"
)

// Defines values for CustomerType.
const (
	Company CustomerType = "company"
	Private CustomerType = "private"
)

// Defines values for DescriptionOnlyInvoiceItemItemType.
const (
	DescriptionOnlyInvoiceItemItemTypeDescriptionOnlyItem DescriptionOnlyInvoiceItemItemType = "descriptionOnlyItem"
)

// Defines values for DescriptionOnlyItemItemType.
const (
	DescriptionOnlyItemItemTypeDescriptionOnlyItem DescriptionOnlyItemItemType = "descriptionOnlyItem"
)

// Defines values for FiscalYearAccountingMethod.
const (
	Accrual FiscalYearAccountingMethod = "accrual"
	Cash    FiscalYearAccountingMethod = "cash"
)

// Defines values for FiscalYearStatus.
const (
	Closed FiscalYearStatus = "closed"
	Open   FiscalYearStatus = "open"
)

// Defines values for FiscalYearVatSetting.
const (
	Monthly   FiscalYearVatSetting = "monthly"
	Quarterly FiscalYearVatSetting = "quarterly"
	Yearly    FiscalYearVatSetting = "yearly"
)

// Defines values for InvoiceStatus.
const (
	Credit    InvoiceStatus = "credit"
	Credited  InvoiceStatus = "credited"
	Draft     InvoiceStatus = "draft"
	Overdue   InvoiceStatus = "overdue"
	Overpaid  InvoiceStatus = "overpaid"
	Paid      InvoiceStatus = "paid"
	Published InvoiceStatus = "published"
	Underpaid InvoiceStatus = "underpaid"
)

// Defines values for InvoiceType.
const (
	InvoiceTypeCashInvoice InvoiceType = "cashInvoice"
	InvoiceTypeInvoice     InvoiceType = "invoice"
)

// Defines values for SalesInvoiceItemItemType.
const (
	SalesInvoiceItemItemTypeSalesItem SalesInvoiceItemItemType = "salesItem"
)

// Defines values for SalesInvoiceItemProductType.
const (
	SalesInvoiceItemProductTypeGoods    SalesInvoiceItemProductType = "goods"
	SalesInvoiceItemProductTypeServices SalesInvoiceItemProductType = "services"
)

// Defines values for SalesInvoiceItemUnitType.
const (
	SalesInvoiceItemUnitTypeCentimeter   SalesInvoiceItemUnitType = "centimeter"
	SalesInvoiceItemUnitTypeDay          SalesInvoiceItemUnitType = "day"
	SalesInvoiceItemUnitTypeGigabyte     SalesInvoiceItemUnitType = "gigabyte"
	SalesInvoiceItemUnitTypeGram         SalesInvoiceItemUnitType = "gram"
	SalesInvoiceItemUnitTypeHectar       SalesInvoiceItemUnitType = "hectar"
	SalesInvoiceItemUnitTypeHour         SalesInvoiceItemUnitType = "hour"
	SalesInvoiceItemUnitTypeKilogram     SalesInvoiceItemUnitType = "kilogram"
	SalesInvoiceItemUnitTypeKilometer    SalesInvoiceItemUnitType = "kilometer"
	SalesInvoiceItemUnitTypeLiter        SalesInvoiceItemUnitType = "liter"
	SalesInvoiceItemUnitTypeMegabyte     SalesInvoiceItemUnitType = "megabyte"
	SalesInvoiceItemUnitTypeMeter        SalesInvoiceItemUnitType = "meter"
	SalesInvoiceItemUnitTypeMeterCubic   SalesInvoiceItemUnitType = "meterCubic"
	SalesInvoiceItemUnitTypeMeterSquared SalesInvoiceItemUnitType = "meterSquared"
	SalesInvoiceItemUnitTypeMile         SalesInvoiceItemUnitType = "mile"
	SalesInvoiceItemUnitTypeMillimeter   SalesInvoiceItemUnitType = "millimeter"
	SalesInvoiceItemUnitTypeMinute       SalesInvoiceItemUnitType = "minute"
	SalesInvoiceItemUnitTypeMonth        SalesInvoiceItemUnitType = "month"
	SalesInvoiceItemUnitTypePiece        SalesInvoiceItemUnitType = "piece"
	SalesInvoiceItemUnitTypeTon          SalesInvoiceItemUnitType = "ton"
	SalesInvoiceItemUnitTypeUnspecified  SalesInvoiceItemUnitType = "unspecified"
	SalesInvoiceItemUnitTypeWeek         SalesInvoiceItemUnitType = "week"
	SalesInvoiceItemUnitTypeWords        SalesInvoiceItemUnitType = "words"
	SalesInvoiceItemUnitTypeYear         SalesInvoiceItemUnitType = "year"
)

// Defines values for SalesItemItemType.
const (
	SalesItemItemTypeSalesItem SalesItemItemType = "salesItem"
)

// Defines values for SalesItemProductType.
const (
	SalesItemProductTypeGoods    SalesItemProductType = "goods"
	SalesItemProductTypeServices SalesItemProductType = "services"
)

// Defines values for SalesItemUnitType.
const (
	SalesItemUnitTypeCentimeter   SalesItemUnitType = "centimeter"
	SalesItemUnitTypeDay          SalesItemUnitType = "day"
	SalesItemUnitTypeGigabyte     SalesItemUnitType = "gigabyte"
	SalesItemUnitTypeGram         SalesItemUnitType = "gram"
	SalesItemUnitTypeHectar       SalesItemUnitType = "hectar"
	SalesItemUnitTypeHour         SalesItemUnitType = "hour"
	SalesItemUnitTypeKilogram     SalesItemUnitType = "kilogram"
	SalesItemUnitTypeKilometer    SalesItemUnitType = "kilometer"
	SalesItemUnitTypeLiter        SalesItemUnitType = "liter"
	SalesItemUnitTypeMegabyte     SalesItemUnitType = "megabyte"
	SalesItemUnitTypeMeter        SalesItemUnitType = "meter"
	SalesItemUnitTypeMeterCubic   SalesItemUnitType = "meterCubic"
	SalesItemUnitTypeMeterSquared SalesItemUnitType = "meterSquared"
	SalesItemUnitTypeMile         SalesItemUnitType = "mile"
	SalesItemUnitTypeMillimeter   SalesItemUnitType = "millimeter"
	SalesItemUnitTypeMinute       SalesItemUnitType = "minute"
	SalesItemUnitTypeMonth        SalesItemUnitType = "month"
	SalesItemUnitTypePiece        SalesItemUnitType = "piece"
	SalesItemUnitTypeTon          SalesItemUnitType = "ton"
	SalesItemUnitTypeUnspecified  SalesItemUnitType = "unspecified"
	SalesItemUnitTypeWeek         SalesItemUnitType = "week"
	SalesItemUnitTypeWords        SalesItemUnitType = "words"
	SalesItemUnitTypeYear         SalesItemUnitType = "year"
)

// Address defines model for address.
type Address struct {
	City string `json:"city"`

	// Country ISO 3166-1 alpha-2 country code
	Country    string  `json:"country"`
	Line1      string  `json:"line1"`
	Line2      *string `json:"line2"`
	PostalCode string  `json:"postalCode"`
}

// ApiError defines model for apiError.
type ApiError struct {
	BokioErrorId *openapi_types.UUID `json:"bokioErrorId,omitempty"`
	Code         *string             `json:"code,omitempty"`
	Errors       *[]struct {
		Field   *string `json:"field,omitempty"`
		Message *string `json:"message,omitempty"`
	} `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Customer defines model for customer.
type Customer struct {
	Address         *Address `json:"address,omitempty"`
	ContactsDetails *[]struct {
		Email *string `json:"email,omitempty"`

		// Id Should not be set for new items
		Id        *openapi_types.UUID `json:"id"`
		IsDefault *bool               `json:"isDefault,omitempty"`
		Name      *string             `json:"name,omitempty"`
		Phone     *string             `json:"phone,omitempty"`
	} `json:"contactsDetails,omitempty"`
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Language Default 'sv'
	Language  *CustomerLanguage `json:"language,omitempty"`
	Name      string            `json:"name"`
	OrgNumber *string           `json:"orgNumber,omitempty"`

	// PaymentTerms Payment terms for the invoices. Payment terms can both take free text or days, in digits, until the payment is due.
	//
	// On the invoice, if a digit is provided it will be suffixed with "days". For example, "30" will be displayed as "30 days" on the invoice. Note that the suffix will, similar to the rest of the invoice, use the language on the customer.
	PaymentTerms *string      `json:"paymentTerms,omitempty"`
	Type         CustomerType `json:"type"`
	VatNumber    *string      `json:"vatNumber,omitempty"`
}

// CustomerLanguage Default 'sv'
type CustomerLanguage string

// CustomerType defines model for Customer.Type.
type CustomerType string

// DescriptionOnlyInvoiceItem defines model for descriptionOnlyInvoiceItem.
type DescriptionOnlyInvoiceItem struct {
	Description string `json:"description"`

	// Id Should not be set for new items
	Id *int64 `json:"id"`

	// ItemRef Identifier of an existing descriptionOnlyItem to use as a template. The field itemType is required.
	ItemRef *struct {
		Description *string `json:"description"`

		// Id Reference to existing descriptionOnlyItem id
		Id *openapi_types.UUID `json:"id,omitempty"`
	} `json:"itemRef"`
	ItemType DescriptionOnlyInvoiceItemItemType `json:"itemType"`
}

// DescriptionOnlyInvoiceItemItemType defines model for DescriptionOnlyInvoiceItem.ItemType.
type DescriptionOnlyInvoiceItemItemType string

// DescriptionOnlyItem defines model for descriptionOnlyItem.
type DescriptionOnlyItem struct {
	Description string `json:"description"`

	// Id Should not be set for new items
	Id       *openapi_types.UUID         `json:"id"`
	ItemType DescriptionOnlyItemItemType `json:"itemType"`
}

// DescriptionOnlyItemItemType defines model for DescriptionOnlyItem.ItemType.
type DescriptionOnlyItemItemType string

// FiscalYear defines model for fiscalYear.
type FiscalYear struct {
	// AccountingMethod The accounting method used by the fiscal year
	AccountingMethod FiscalYearAccountingMethod `json:"accountingMethod"`

	// EndDate The end date of the fiscal year
	EndDate openapi_types.Date `json:"endDate"`

	// Id Unique identifier for the fiscal year
	Id openapi_types.UUID `json:"id"`

	// StartDate The start date of the fiscal year
	StartDate openapi_types.Date `json:"startDate"`

	// Status The status of the fiscal year
	Status *FiscalYearStatus `json:"status,omitempty"`

	// VatSetting The VAT setting for the fiscal year
	VatSetting FiscalYearVatSetting `json:"vatSetting"`
}

// FiscalYearAccountingMethod The accounting method used by the fiscal year
type FiscalYearAccountingMethod string

// FiscalYearStatus The status of the fiscal year
type FiscalYearStatus string

// FiscalYearVatSetting The VAT setting for the fiscal year
type FiscalYearVatSetting string

// Invoice defines model for invoice.
type Invoice struct {
	AttachmentRefs *[]struct {
		Id   *openapi_types.UUID `json:"id,omitempty"`
		Name *string             `json:"name,omitempty"`
	} `json:"attachmentRefs,omitempty"`
	BillingAddress *Invoice_BillingAddress `json:"billingAddress,omitempty"`

	// Currency ISO 4217 currency code
	Currency     *string  `json:"currency,omitempty"`
	CurrencyRate *float64 `json:"currencyRate,omitempty"`
	CustomerRef  *struct {
		Id   *openapi_types.UUID `json:"id,omitempty"`
		Name *string             `json:"name,omitempty"`
	} `json:"customerRef,omitempty"`
	DeliveryAddress *Invoice_DeliveryAddress `json:"deliveryAddress,omitempty"`
	DueDate         openapi_types.Date       `json:"dueDate"`
	Id              *openapi_types.UUID      `json:"id,omitempty"`
	InvoiceDate     openapi_types.Date       `json:"invoiceDate"`

	// InvoiceNumber The invoice number will be generated at the time of publishing the invoice.
	InvoiceNumber *string                  `json:"invoiceNumber"`
	LineItems     []Invoice_LineItems_Item `json:"lineItems"`

	// Metadata Metadata fields for the invoice as string key-value pairs. These fields can be used for filtering.All metadata keys must
	// start with a letter or underscore and contain only alphanumeric characters and underscores.
	Metadata *map[string]string `json:"metadata,omitempty"`

	// OrderNumberReference The order number associated with the invoice.
	OrderNumberReference *string        `json:"orderNumberReference,omitempty"`
	PaidAmount           *float64       `json:"paidAmount,omitempty"`
	Status               *InvoiceStatus `json:"status,omitempty"`
	TotalAmount          *float64       `json:"totalAmount,omitempty"`
	TotalTax             *float64       `json:"totalTax,omitempty"`

	// Type The type of the invoice can be invoice or cashInvoice. Can only be set to invoice when creating a new invoice and will default to invoice if not set.
	Type *InvoiceType `json:"type,omitempty"`
}

// Invoice_BillingAddress defines model for Invoice.BillingAddress.
type Invoice_BillingAddress struct {
	union json.RawMessage
}

// Invoice_DeliveryAddress defines model for Invoice.DeliveryAddress.
type Invoice_DeliveryAddress struct {
	union json.RawMessage
}

// Invoice_LineItems_Item defines model for invoice.lineItems.Item.
type Invoice_LineItems_Item struct {
	union json.RawMessage
}

// InvoiceStatus defines model for Invoice.Status.
type InvoiceStatus string

// InvoiceType The type of the invoice can be invoice or cashInvoice. Can only be set to invoice when creating a new invoice and will default to invoice if not set.
type InvoiceType string

// InvoiceAttachment defines model for invoiceAttachment.
type InvoiceAttachment struct {
	FileName  *string             `json:"fileName,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	InvoiceId *openapi_types.UUID `json:"invoiceId,omitempty"`
}

// InvoiceItem defines model for invoiceItem.
type InvoiceItem struct {
	union json.RawMessage
}

// Item defines model for item.
type Item struct {
	union json.RawMessage
}

// JournalEntry defines model for journalEntry.
type JournalEntry struct {
	Date                     *openapi_types.Date `json:"date,omitempty"`
	Id                       *openapi_types.UUID `json:"id,omitempty"`
	Items                    *[]JournalEntryItem `json:"items,omitempty"`
	JournalEntryNumber       *string             `json:"journalEntryNumber,omitempty"`
	ReversedByJournalEntryId *openapi_types.UUID `json:"reversedByJournalEntryId"`
	ReversingJournalEntryId  *openapi_types.UUID `json:"reversingJournalEntryId"`
	Title                    *string             `json:"title,omitempty"`
}

// JournalEntryItem defines model for journalEntryItem.
type JournalEntryItem struct {
	Account *int32   `json:"account,omitempty"`
	Credit  *float64 `json:"credit,omitempty"`
	Debit   *float64 `json:"debit,omitempty"`
	Id      *int64   `json:"id,omitempty"`
}

// PagedResponse defines model for pagedResponse.
type PagedResponse struct {
	CurrentPage *int32 `json:"currentPage,omitempty"`
	TotalItems  *int32 `json:"totalItems,omitempty"`
	TotalPages  *int32 `json:"totalPages,omitempty"`
}

// SalesInvoiceItem defines model for salesInvoiceItem.
type SalesInvoiceItem struct {
	Description string `json:"description"`

	// Id Should not be set for new items
	Id *int64 `json:"id"`

	// ItemRef Identifier of an existing salesItem to use as a template. Fields itemType and quantity are required. Values in other fields will be overridden by values from this referenced item
	ItemRef *struct {
		Description *string `json:"description"`

		// Id Reference to existing salesItem id
		Id *openapi_types.UUID `json:"id,omitempty"`
	} `json:"itemRef"`
	ItemType    SalesInvoiceItemItemType    `json:"itemType"`
	ProductType SalesInvoiceItemProductType `json:"productType"`
	Quantity    float64                     `json:"quantity"`
	TaxRate     float64                     `json:"taxRate"`
	UnitPrice   float64                     `json:"unitPrice"`
	UnitType    *SalesInvoiceItemUnitType   `json:"unitType,omitempty"`
}

// SalesInvoiceItemItemType defines model for SalesInvoiceItem.ItemType.
type SalesInvoiceItemItemType string

// SalesInvoiceItemProductType defines model for SalesInvoiceItem.ProductType.
type SalesInvoiceItemProductType string

// SalesInvoiceItemUnitType defines model for SalesInvoiceItem.UnitType.
type SalesInvoiceItemUnitType string

// SalesItem defines model for salesItem.
type SalesItem struct {
	Description string `json:"description"`

	// Id Should not be set for new items
	Id          *openapi_types.UUID  `json:"id"`
	ItemType    SalesItemItemType    `json:"itemType"`
	ProductType SalesItemProductType `json:"productType"`
	TaxRate     float64              `json:"taxRate"`
	UnitPrice   float64              `json:"unitPrice"`
	UnitType    SalesItemUnitType    `json:"unitType"`
}

// SalesItemItemType defines model for SalesItem.ItemType.
type SalesItemItemType string

// SalesItemProductType defines model for SalesItem.ProductType.
type SalesItemProductType string

// SalesItemUnitType defines model for SalesItem.UnitType.
type SalesItemUnitType string

// Upload defines model for upload.
type Upload struct {
	ContentType    *string             `json:"contentType,omitempty"`
	Description    *string             `json:"description,omitempty"`
	Id             *openapi_types.UUID `json:"id,omitempty"`
	JournalEntryId *openapi_types.UUID `json:"journalEntryId"`
}

// GetCustomerParams defines parameters for GetCustomer.
type GetCustomerParams struct {
	// Page Page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Query Optional query to filter the data set with supported fields listed below and [available operations](filtering).
	//
	// | Field                | Type        |
	// | -------------------- | ----------- |
	// | name                 | string      |
	// | type                 | string      |
	// | vatNumber            | string      |
	// | orgNumber            | string      |
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// GetFiscalYearsParams defines parameters for GetFiscalYears.
type GetFiscalYearsParams struct {
	// Page Page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Query Optional query to filter the data set with supported fields listed below and [available operations](filtering).
	//
	// | Field                | Type        |
	// | -------------------- | ----------- |
	// | startDate            | date      |
	// | endDate              | date      |
	// | accountingMethod     | string      |
	// | status               | string      |
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// GetInvoiceParams defines parameters for GetInvoice.
type GetInvoiceParams struct {
	// Page Page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Query Optional query to filter the data set with supported fields listed below and [available operations](filtering).
	// View documentation for filtering on metatdata [here](metadata).
	//
	// | Field                | Type        |
	// | -------------------- | ----------- |
	// | type                 | string      |
	// | customerRef          | string      |
	// | orderNumberReference | string      |
	// | currency             | string      |
	// | totalAmount          | number      |
	// | status               | string      |
	// | invoiceDate          | date        |
	// | dueDate              | date        |
	// | metadata             | string      |
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// GetInvoiceAttachmentsParams defines parameters for GetInvoiceAttachments.
type GetInvoiceAttachmentsParams struct {
	// Page Page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Query Optional query to filter the data set with supported fields listed below and [available operations](filtering).
	//
	// | Field                     | Type        |
	// | ------------------------- | ----------- |
	// | fileName                  | string      |
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// PostInvoiceAttachmentMultipartBody defines parameters for PostInvoiceAttachment.
type PostInvoiceAttachmentMultipartBody struct {
	// File The file to attach to invoice
	File openapi_types.File `json:"file"`
}

// PostInvoiceAttachmentParams defines parameters for PostInvoiceAttachment.
type PostInvoiceAttachmentParams struct {
	// ContentType Content type of the request
	ContentType string `json:"Content-Type"`
}

// PostInvoiceLineItemJSONBody defines parameters for PostInvoiceLineItem.
type PostInvoiceLineItemJSONBody struct {
	union json.RawMessage
}

// GetItemsParams defines parameters for GetItems.
type GetItemsParams struct {
	// Page Page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Query Optional query to filter the data set with supported fields listed below and [available operations](filtering).
	//
	// | Field                | Type        |
	// | -------------------- | ----------- |
	// | description          | string      |
	// | itemType             | string      |
	// | productType          | string      |
	// | unitType             | string      |
	// | unitPrice            | number      |
	// | taxRate              | number      |
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// PostItemJSONBody defines parameters for PostItem.
type PostItemJSONBody struct {
	union json.RawMessage
}

// PutItemJSONBody defines parameters for PutItem.
type PutItemJSONBody struct {
	union json.RawMessage
}

// GetJournalentryParams defines parameters for GetJournalentry.
type GetJournalentryParams struct {
	// Page Page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Query Optional query to filter the data set with supported fields listed below and [available operations](filtering).
	//
	// | Field                     | Type        |
	// | ------------------------- | ----------- |
	// | title                     | string      |
	// | journalEntryNumber        | string      |
	// | date                      | date        |
	// | reversingJournalEntryId   | string      |
	// | reversedByJournalEntryId  | string      |
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// GetUploadsParams defines parameters for GetUploads.
type GetUploadsParams struct {
	// Page Page number
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Query Optional query to filter the data set with supported fields listed below and [available operations](filtering).
	//
	// | Field                     | Type        |
	// | ------------------------- | ----------- |
	// | description               | string      |
	// | journalEntryId            | string      |
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// AddUploadMultipartBody defines parameters for AddUpload.
type AddUploadMultipartBody struct {
	// Description Description of the upload. If left empty, the file name will be used.
	Description *string `json:"description,omitempty"`

	// File The file to upload
	File openapi_types.File `json:"file"`

	// JournalEntryId The journal entry id to attach the upload to
	JournalEntryId *openapi_types.UUID `json:"journalEntryId,omitempty"`
}

// AddUploadParams defines parameters for AddUpload.
type AddUploadParams struct {
	// ContentType Content type of the request
	ContentType string `json:"Content-Type"`
}

// PostCustomerJSONRequestBody defines body for PostCustomer for application/json ContentType.
type PostCustomerJSONRequestBody = Customer

// PutCustomerJSONRequestBody defines body for PutCustomer for application/json ContentType.
type PutCustomerJSONRequestBody = Customer

// PostInvoiceJSONRequestBody defines body for PostInvoice for application/json ContentType.
type PostInvoiceJSONRequestBody = Invoice

// PutInvoiceJSONRequestBody defines body for PutInvoice for application/json ContentType.
type PutInvoiceJSONRequestBody = Invoice

// PostInvoiceAttachmentMultipartRequestBody defines body for PostInvoiceAttachment for multipart/form-data ContentType.
type PostInvoiceAttachmentMultipartRequestBody PostInvoiceAttachmentMultipartBody

// PostInvoiceLineItemJSONRequestBody defines body for PostInvoiceLineItem for application/json ContentType.
type PostInvoiceLineItemJSONRequestBody PostInvoiceLineItemJSONBody

// PostItemJSONRequestBody defines body for PostItem for application/json ContentType.
type PostItemJSONRequestBody PostItemJSONBody

// PutItemJSONRequestBody defines body for PutItem for application/json ContentType.
type PutItemJSONRequestBody PutItemJSONBody

// PostJournalentryJSONRequestBody defines body for PostJournalentry for application/json ContentType.
type PostJournalentryJSONRequestBody = JournalEntry

// AddUploadMultipartRequestBody defines body for AddUpload for multipart/form-data ContentType.
type AddUploadMultipartRequestBody AddUploadMultipartBody

// AsAddress returns the union data inside the Invoice_BillingAddress as a Address
func (t Invoice_BillingAddress) AsAddress() (Address, error) {
	var body Address
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddress overwrites any union data inside the Invoice_BillingAddress as the provided Address
func (t *Invoice_BillingAddress) FromAddress(v Address) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddress performs a merge with any union data inside the Invoice_BillingAddress, using the provided Address
func (t *Invoice_BillingAddress) MergeAddress(v Address) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Invoice_BillingAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Invoice_BillingAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAddress returns the union data inside the Invoice_DeliveryAddress as a Address
func (t Invoice_DeliveryAddress) AsAddress() (Address, error) {
	var body Address
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddress overwrites any union data inside the Invoice_DeliveryAddress as the provided Address
func (t *Invoice_DeliveryAddress) FromAddress(v Address) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddress performs a merge with any union data inside the Invoice_DeliveryAddress, using the provided Address
func (t *Invoice_DeliveryAddress) MergeAddress(v Address) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Invoice_DeliveryAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Invoice_DeliveryAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsInvoiceItem returns the union data inside the Invoice_LineItems_Item as a InvoiceItem
func (t Invoice_LineItems_Item) AsInvoiceItem() (InvoiceItem, error) {
	var body InvoiceItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvoiceItem overwrites any union data inside the Invoice_LineItems_Item as the provided InvoiceItem
func (t *Invoice_LineItems_Item) FromInvoiceItem(v InvoiceItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvoiceItem performs a merge with any union data inside the Invoice_LineItems_Item, using the provided InvoiceItem
func (t *Invoice_LineItems_Item) MergeInvoiceItem(v InvoiceItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Invoice_LineItems_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Invoice_LineItems_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSalesInvoiceItem returns the union data inside the InvoiceItem as a SalesInvoiceItem
func (t InvoiceItem) AsSalesInvoiceItem() (SalesInvoiceItem, error) {
	var body SalesInvoiceItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSalesInvoiceItem overwrites any union data inside the InvoiceItem as the provided SalesInvoiceItem
func (t *InvoiceItem) FromSalesInvoiceItem(v SalesInvoiceItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSalesInvoiceItem performs a merge with any union data inside the InvoiceItem, using the provided SalesInvoiceItem
func (t *InvoiceItem) MergeSalesInvoiceItem(v SalesInvoiceItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDescriptionOnlyInvoiceItem returns the union data inside the InvoiceItem as a DescriptionOnlyInvoiceItem
func (t InvoiceItem) AsDescriptionOnlyInvoiceItem() (DescriptionOnlyInvoiceItem, error) {
	var body DescriptionOnlyInvoiceItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDescriptionOnlyInvoiceItem overwrites any union data inside the InvoiceItem as the provided DescriptionOnlyInvoiceItem
func (t *InvoiceItem) FromDescriptionOnlyInvoiceItem(v DescriptionOnlyInvoiceItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDescriptionOnlyInvoiceItem performs a merge with any union data inside the InvoiceItem, using the provided DescriptionOnlyInvoiceItem
func (t *InvoiceItem) MergeDescriptionOnlyInvoiceItem(v DescriptionOnlyInvoiceItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t InvoiceItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InvoiceItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSalesItem returns the union data inside the Item as a SalesItem
func (t Item) AsSalesItem() (SalesItem, error) {
	var body SalesItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSalesItem overwrites any union data inside the Item as the provided SalesItem
func (t *Item) FromSalesItem(v SalesItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSalesItem performs a merge with any union data inside the Item, using the provided SalesItem
func (t *Item) MergeSalesItem(v SalesItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDescriptionOnlyItem returns the union data inside the Item as a DescriptionOnlyItem
func (t Item) AsDescriptionOnlyItem() (DescriptionOnlyItem, error) {
	var body DescriptionOnlyItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDescriptionOnlyItem overwrites any union data inside the Item as the provided DescriptionOnlyItem
func (t *Item) FromDescriptionOnlyItem(v DescriptionOnlyItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDescriptionOnlyItem performs a merge with any union data inside the Item, using the provided DescriptionOnlyItem
func (t *Item) MergeDescriptionOnlyItem(v DescriptionOnlyItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
